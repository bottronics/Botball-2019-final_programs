#include <kipr/botball.h>
#include <stdio.h>

#define light				3	//defines at the beginning, won't work otherwise	
#define dark				150
#define clamp				1

	void init();

	int drive(int,int); 
	int drive_backwards(int,int);
	void close_clamp();
	void close_clamp_a_little_bit();
	void get_one_fireman();
	void get_two_fireman();
	void open_clamp();
	void open_clamp_a_little_bit();
	int rotate_right(int);
	int rotate_left(int,int);
	void rotate_till_black();
	void calibrate();
	void camera();
	void turn_around();
	int rotate45_r(int);
	int rotate45_l(int);
	void drive_correction();
	void open_clamp_back();
	void close_clamp_back();
	void kip_down_back_clamp();
	void rise_back_clamp();
	void drive_till_black();
	void drive_till_white();
	void calibrate_bw_sensor();
	void camera_medical_building();
	void calibrate_correction();
	void calibrate_fireman();
	void calibrate_before_medical();
	void firetruck();
	void get_robot_parallel();
	void medical_building_drive();
	void Step1();
	void Step2();
	void Step3();
	void Step4();
	void Step5();
	void Step6();
	void Step7();
	void Step8();
	void Step9();
	void Step10();
	void Step11();

	int i=1;
	int a=0;
    int b=0;
    int c=0;
    int average=0;
	int burning=0;
	

    int main()
	{	
        while (get_servo_position(clamp) != 1118)
        {
        set_servo_position(clamp,1118);
        }
        init();
    	int detect=0;
    	int loops=0;
        int distance=0;
      
    	camera_open_black();
    	while(loops<=70 && detect<5)
    	{
            msleep(50);
    		camera_update();

            
    		if (get_object_count(0)>=1)
    		{
     			detect++;
     			printf("Detectet\n");
                printf("Height: %d\n", get_object_center_y(0,0));
                distance=distance+get_object_center_y(0,0);
    		}
            
   		 	loops++;
            
    		
        }
        printf("70 Loops ok\n");
        
        if (detect>0)
        	{
       	 	average=distance/detect;
        	printf("Average: %d\n", average);
        	}
        else
        	{
        	average=40;
        	printf("Average: %d\n", average);
       	 	}
        
        int j=0;
     	while (analog(light) > dark)
        {
            msleep(10);
            if (j>500)
            {
                
                printf("Wait for light\n");
                j=0;
            }
            j++; 
        }
       
  
       	shut_down_in(120);
       	Step1();
      	Step2();
        //drive_till_white();
 
     	return 0;
	}

	void init()
    {	
        printf("Hi Bottball\n");
        printf("My Name is Scorpion King\n");
        printf("Init\n");
       //Motor, Servo
     	#define motor_r			    0
        #define motor_l			    1	
        #define back_clamp			3
        #define move_back_clamp		2
        
        //Motion   	 	
        #define clamp_open		  751
        #define clamp_close 	 2000
        #define rotate_r		  850
        #define rotate_l		 -900
        #define turn			 1600
        #define rotate_r45	  	  110
        #define rotate_l45     	 -110
        #define back_clamp_close  450
        #define back_clamp_open  1800
        #define back_clamp_up	 1800
        #define back_clamp_down	  500
         
        //Sensors
        #define bw_right		   	4
        #define bw_left		       	5
        #define bumper_l		    0
        #define bumper_r			1
        #define light				3
        #define black			  	500
        #define white		      	100
        #define bumper_front		2
        
        //Camera
        #define yellow_objects	    0
        #define red_objects			1
        
        printf("Init complete\n");
        msleep(500);
        i--;
    }

	int drive(int forward, int v_drive)
    {
      	cmpc(motor_r); 
      	cmpc(motor_l);
     	while (gmpc(motor_l)<(forward))
      		{
     	 	motor(motor_r,-v_drive);
         	motor(motor_l,v_drive);
      		}
      	msleep(500);
        ao();
      	return 0;
    }

	int drive_backwards(int backward, int v_drive)
    {
     	cmpc(motor_l);
     	cmpc(motor_r);
     
    	while(gmpc(motor_l)>backward)
    {
     motor(motor_r,v_drive);
     motor(motor_l,-v_drive);
    }
    msleep(500);
    ao();
    return 0;
    }

	
	void open_clamp()
    {
    enable_servos();
    while (get_servo_position(clamp)!=clamp_open)
    {
    set_servo_position(clamp, clamp_open);
    printf("Servo position: %d\n", get_servo_position(clamp));
    }
    msleep(500);   
    disable_servos();
    }
    
	void open_clamp_a_little_bit()
    {	
        int clamp_close_a_little_bit_value=clamp_close/(1.7);
        enable_servos();
    	while (get_servo_position(clamp)!=clamp_close_a_little_bit_value)
    	{
  		
    	set_servo_position(clamp,clamp_close_a_little_bit_value);
   	 	
   		printf("Servo position: %d\n", get_servo_position(clamp));
    	msleep(500);
    	}
        disable_servo(clamp);
    }
	void close_clamp()
    {
        int shut_clamp=0;
        enable_servos();
    	while (get_servo_position(clamp)<=clamp_close)
    	{
  		get_servo_position(clamp);
        shut_clamp=get_servo_position(clamp)+50;
    	set_servo_position(clamp, shut_clamp);
   	 	
   		printf("Servo position: %d\n", get_servo_position(clamp));
    	msleep(20);
    	}
        printf("Out of While");
        disable_servo(clamp);
    }
	void close_clamp_a_little_bit()
    {	
        int clamp_close_a_little_bit_value=clamp_close*(1.5/2);
        enable_servos();
    	while (get_servo_position(clamp)!=clamp_close_a_little_bit_value)
    	{
  		
    	set_servo_position(clamp,clamp_close_a_little_bit_value);
   	 	
   		printf("Servo position: %d\n", get_servo_position(clamp));
    	msleep(500);
    	}
        disable_servo(clamp);
    }

	int rotate_right(int right)
	{
     cmpc(motor_r); 
     while (gmpc(motor_r)<right)
      {
     	 motor(motor_r,40);
         motor(motor_l,40);
         printf("Motor position: %d\n", gmpc(motor_r));
     }
     ao();
     return 0;
    }

	int rotate_left(int left, int v)
	{
     cmpc(motor_l); 
     while (gmpc(motor_l)>left)
      {
     	 motor(motor_r,-v);
         motor(motor_l,-v);
         printf("Motor position: %d\n", gmpc(motor_l));
     }
     ao();
     return 0;
    }
	
	void calibrate()
	{
     a=0;
     b=0;
     c=0;
     int x=0;
     printf("Calibrate robot\n");
     cmpc(motor_r); 
     cmpc(motor_l);
     printf("Motor position: %d\n", gmpc(motor_r));
     while ((b==0 || c==0) && x<15)
      {
         if (a==0)
         {    
     	 motor(motor_r,60);
         motor(motor_l,-60);
         a++;
         }
         if (digital(bumper_l) == 1)
         {
        off(motor_l);
         b++;
         }
         if (digital(bumper_r) == 1)
         {
         off(motor_r);
         c++;
         }
       x++;
       msleep(200);
     }
      msleep(500);
      ao();     
    }                
	
	void drive_correction()
    {
     printf("I am here");
    int length=0;
    cmpc(motor_l);
   	gohere:  
   	while (length<5000)
    {
	 	while(analog(bw_right)<black && analog(bw_left)<black)
     		{
      			length=length+gmpc(motor_l);
      			drive(50,50);
      			printf("Distance drove: %d\n", length);
      			msleep(50);
				goto gohere;
     		}
   	 		if (analog(bw_right) > black && analog(bw_left) < black)
    		{
         		msleep(20);
    				while(analog(bw_right)>black && analog(bw_left) < black)
       				{
              			motor(motor_l,20);  
                		off(motor_r);
       				}
    		}
     		if (analog(bw_right)<black && analog(bw_left)>black)
     		{
        		msleep(20);
    			while(analog(bw_left) > black && analog(bw_right) < black)
        		{
          			motor(motor_r,-20);
          			off(motor_l);
         
        		}
     		}
    	}
     	
     
     ao();
     msleep(500);
    }

		void drive_till_black()
    	{
   	 		while (analog(bw_right)<black && analog(bw_left)<black)
    		{
    			drive(50,30);
   	 		}
    	}

	void camera_medical_building()
    {	
    	int detect=0;
    	int loops=0;
        
        printf("Burning: %d\n", burning); 
    	camera_open_black();
    	while(loops<=40 && detect<8)
    	{
            msleep(50);

            camera_update();
            
    		if (get_object_count(0)>0)
    		{
     			detect++;
     			printf("Detectet\n");
                printf("Position: %d\n", get_object_center_x(0,0));
    		}
            
   		 	loops++;
            
    		printf("Loops++\n");
           
     	}
    printf("Detected: %d\n", detect);    
    if(detect>=8)
    {
     burning=1;   
    }
        
    else
    {
     burning=0;   
    }
    printf("Burning: %d\n",burning);
	camera_close();
    ao();
    msleep(500);
    }

	void get_two_fireman()
    {
    drive(375,100);
    calibrate_fireman();
    drive_backwards(-10,10);
    close_clamp();
    msleep(50);
    drive_backwards(-150,100);
    open_clamp();
    drive(250,100);
    calibrate_fireman();
	drive_backwards(-1,10);
    close_clamp();
    msleep(50);
    drive_backwards(-150,100); 
    }

	void get_one_fireman()
    {
   	drive(500,100);
    calibrate_fireman();
    drive_backwards(-1,10);
    close_clamp();
    msleep(100);
    drive_backwards(-150,100);
    }

	void calibrate_fireman()
    {
    	while(digital(bumper_front)==0)
    	{
      		drive(75,25);   
    	}
    }
    
	void firetruck()
	{
    	
    		if (burning==1)
    		{
            rotate_right(20);
    		drive(80,30);
    		close_clamp();
    		drive_backwards(-1500,100);
    		rotate_right(600);
            open_clamp();
        	drive(75,75);
        	drive_backwards(-275,100);
        	rotate_right(775);
        	drive_backwards(-3500,100);		//calibrate on other side
        	calibrate();
    		}
        
    		else
            {
            rotate_right(425);
    		drive(80,50);
    		close_clamp();
    		drive_backwards(-1500,100);
    		rotate_right(530);
            drive(1700,90);
            msleep(100);
            open_clamp();
            msleep(100);
            drive(500,50);
            drive_backwards(-250,90);
            close_clamp();
            drive_backwards(-100,50);
            msleep(100);
            rotate_right(420);
            drive_backwards(-3000,80);		//calibrate on other side
            calibrate();
    		}
    }

	void medical_building_drive()
    {
    if (burning == 1)
    	{
        close_clamp();
      	printf ("Burning: %d\n", burning);
        rotate_right(375);
       	open_clamp_a_little_bit();
        drive(700,100);
        drive(1200,30);
        close_clamp_a_little_bit();
        open_clamp();
      	drive_backwards(-800,100);
        close_clamp();
        rotate_left(-300,40);
        drive(70,100);
      	rotate_left(-720,40);
        open_clamp();
    	}
     
    if (burning == 0)
    	{
        printf ("Burning: %d\n", burning);
        rotate_right(110);
        drive(200,70);
        drive(1250,30);
        close_clamp();
        open_clamp();
        msleep(20);
        drive_backwards(-950,100);
    	rotate_left(-750,40);
    	}    
    }

	void rotate_till_black()
	{
     while (analog(bw_right)<black)
     {
     motor(motor_r,-30);    
     }
    }
	void drive_till_white()
	{
        printf ("drive_till_white_started\n");
         while (analog(bw_left)>160 && analog(bw_right)>160)
        {
        	drive(50,20);          
        }
    }

	void calibrate_bw_sensor()
    {
        
		while (analog(bw_left) < black	||	analog(bw_right) < black)
        {
            drive_backwards(-10,10);
            
            if (analog(bw_right) > black && analog(bw_left) < black)
            {
                msleep(100);
                while(analog(bw_right) > black)
                {
              		motor(motor_r,-60); 
                }
            }
            if (analog(bw_left) > black && analog(bw_right) < black)
            {
                
                while(analog(bw_left) > black)
                {
                	motor(motor_l,5);  
                }
            }
        }
    }


	void Step1()
    {
    printf("Step 1 started\n");
    msleep(2222);
    drive_backwards(-150,80);
    open_clamp();
    rotate_right(1);
    drive(2300,100);
   	drive_till_black();
    drive(700,30);
    close_clamp();
    msleep(20);
    rotate_left(-1000,20);
    open_clamp();
    drive(100,50);
    drive_correction();
    rotate_till_black();
    rotate_left(-3,40);
 	msleep(50);
  	camera_medical_building();
    medical_building_drive();
    printf("Step 1 finished\n");    
    }

	void Step2()
    {
    printf("Step 2 started\n");
    open_clamp();
    printf("Burning: %d\n", burning);
    if (burning == 1)
    {
    drive_backwards(-1000,100);
    calibrate();
    msleep(500);
   	drive(4000,100);
    }
    else 
    {
     drive (1450,90);   
    }
    firetruck();
   	open_clamp();
	drive(1500,50);
    rotate_left(-790,40);			
    get_two_fireman();			//until here: get two fireman
    
    
    if(burning == 1)
    {
     drive_backwards(-150,100);
     rotate_right(390);
     open_clamp();
     drive(1800,80);
       
     msleep(20);
     drive_backwards(-1800,80);
     rotate_left(-450,40);
     get_two_fireman();
     
     drive_backwards(-150,100);
     rotate_right(300);
     open_clamp();
     drive(2000,80);
     
     msleep(20);
     drive_backwards(-1000,80);
     rotate_left(-450,40);
     get_one_fireman();
     
     drive_backwards(-150,100);
     rotate_right(300);
     open_clamp();
     drive(1250,50);
     msleep(50);
     close_clamp_a_little_bit();
     open_clamp();					//all firemen are delivered
   
     
    }
    else
    {
     	drive_backwards(-1000,100);
     	rotate_right(430);
     	drive(2300,75);
     	open_clamp();
     	drive(900,30);					//the first two fireman are delivered
     	
     	drive_backwards(-350,90);
     	close_clamp_a_little_bit();
     	drive_backwards(-350,50);
     	rotate_right(280);
     	drive_backwards(-3000,100);		//calibrate on other side
     	calibrate();
     	open_clamp();
		drive(1700,50);
    	rotate_left(-780,40);
        get_two_fireman();
        
        drive_backwards(-1000,100);
     	rotate_right(500);
     	drive(2000,90);
     	open_clamp();
        drive(1000,90);
     	drive(500,30);	//the second two fireman are delivered
    }
    }
    
    
